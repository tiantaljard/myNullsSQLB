/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mynullssqlB;

import java.awt.CardLayout;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

import javax.swing.RowFilter;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;

/**
 * @Date July 2017
 * @author TianTaljard
 * The purpose of the class is to provide a GUI to find,
 * analyse and explore nulls and blanks in data
 */
public class MySQLNullsApp extends javax.swing.JFrame {

    private MySQLDBConnect db;
    private String dynamic_query;
    private String dynamic_query_rowcount;
    private int dynamic_rowcount;
    private String tableViewinUse = "";

    /**
     * Creates new form MySQLNullsApp
     */
    public MySQLNullsApp() {

        try {
            /*
            ResultTableModel tableModel = new ResultTableModel();
            System.out.println(db.getNumberOfTables());
            
            tableModel.setResultset(tbls);
            
            tableModel.setsqlRowCount(db.getNumberOfTables());
             */
            initComponents();
            showConnectionDialog();
            //initializeModel();
            setInitialSummaryTable();

        } catch (SQLException ex) {
            Logger.getLogger(MySQLNullsApp.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        tablePopupMenu = new javax.swing.JPopupMenu();
        showNBSummaryTbl = new javax.swing.JMenuItem();
        showInitialSummaryTbl = new javax.swing.JMenuItem();
        showDataNavigatorPanel = new javax.swing.JMenuItem();
        showAllTablesDataNavigatorTbl = new javax.swing.JMenuItem();
        showSelectedColumnData = new javax.swing.JMenuItem();
        mainJPanel = new javax.swing.JPanel();
        initialSummaryPanel = new javax.swing.JPanel();
        initialsummaryScrollPanel = new javax.swing.JScrollPane();
        summaryTable = new javax.swing.JTable();
        topInitialSummaryView = new javax.swing.JPanel();
        intialSummaryfilterPanel = new javax.swing.JPanel();
        initialSummaryTableFilter = new javax.swing.JTextField();
        dataExplorerSplitPane = new javax.swing.JSplitPane();
        tblNmParentPanel = new javax.swing.JPanel();
        tblNmFilterPanel = new javax.swing.JPanel();
        tableNameFilter = new javax.swing.JTextField();
        tblNmScrollPanel = new javax.swing.JScrollPane();
        tableNameTable = new javax.swing.JTable();
        mainRightPanel = new javax.swing.JPanel();
        columnDetailsSpiltPanel = new javax.swing.JSplitPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        colNmParentPanel = new javax.swing.JPanel();
        colNmFilterPanel = new javax.swing.JPanel();
        columnNameFilter = new javax.swing.JTextField();
        colNmScrollPanel = new javax.swing.JScrollPane();
        columnNameTable = new javax.swing.JTable(){
            @Override
            public Class getColumnClass(int column) {
                switch (column) {
                    case 0:
                    return String.class;
                    case 1:
                    return Boolean.class;
                    case 2:
                    return Boolean.class;
                    case 3:
                    return String.class;
                    default:
                    return String.class;
                }
            }
        };
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        tablePopupMenu =new JPopupMenu();

        showNBSummaryTbl.setText("Show Nulls & Blank Summary Table");
        showNBSummaryTbl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showNBSummaryTblActionPerformed(evt);
            }
        });

        showInitialSummaryTbl.setText("Show Initial Table Summary");
        showInitialSummaryTbl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showInitialSummaryTblActionPerformed(evt);
            }
        });

        showDataNavigatorPanel.setText("Show Table Explorer");
        showDataNavigatorPanel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showDataNavigatorPanelActionPerformed(evt);
            }
        });

        showAllTablesDataNavigatorTbl.setText("Show All Tables");
        showAllTablesDataNavigatorTbl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllTablesDataNavigatorTblActionPerformed(evt);
            }
        });

        showSelectedColumnData.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainJPanel.setLayout(new java.awt.CardLayout());

        initialSummaryPanel.setLayout(new java.awt.BorderLayout());

        summaryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                summaryTableMouseClicked(evt);
            }
        });
        initialsummaryScrollPanel.setViewportView(summaryTable);

        initialSummaryPanel.add(initialsummaryScrollPanel, java.awt.BorderLayout.CENTER);

        topInitialSummaryView.setLayout(new java.awt.BorderLayout());

        initialSummaryTableFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initialSummaryTableFilterActionPerformed(evt);
            }
        });
        initialSummaryTableFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                initialSummaryTableFilterKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout intialSummaryfilterPanelLayout = new javax.swing.GroupLayout(intialSummaryfilterPanel);
        intialSummaryfilterPanel.setLayout(intialSummaryfilterPanelLayout);
        intialSummaryfilterPanelLayout.setHorizontalGroup(
            intialSummaryfilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(intialSummaryfilterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(initialSummaryTableFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(639, Short.MAX_VALUE))
        );
        intialSummaryfilterPanelLayout.setVerticalGroup(
            intialSummaryfilterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, intialSummaryfilterPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(initialSummaryTableFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        topInitialSummaryView.add(intialSummaryfilterPanel, java.awt.BorderLayout.CENTER);

        initialSummaryPanel.add(topInitialSummaryView, java.awt.BorderLayout.NORTH);

        mainJPanel.add(initialSummaryPanel, "initialSummaryCard");

        dataExplorerSplitPane.setPreferredSize(new java.awt.Dimension(800, 536));

        tblNmParentPanel.setLayout(new java.awt.BorderLayout());

        tblNmFilterPanel.setLayout(new java.awt.BorderLayout());

        tableNameFilter.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tableNameFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableNameFilterKeyReleased(evt);
            }
        });
        tblNmFilterPanel.add(tableNameFilter, java.awt.BorderLayout.CENTER);

        tblNmParentPanel.add(tblNmFilterPanel, java.awt.BorderLayout.NORTH);

        tblNmScrollPanel.setPreferredSize(new java.awt.Dimension(100, 500));

        tableNameTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Tables"
            }
        ));
        tableNameTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableNameTableMouseClicked(evt);
            }
        });
        tableNameTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tableNameTableKeyReleased(evt);
            }
        });
        tblNmScrollPanel.setViewportView(tableNameTable);

        tblNmParentPanel.add(tblNmScrollPanel, java.awt.BorderLayout.CENTER);

        dataExplorerSplitPane.setLeftComponent(tblNmParentPanel);

        mainRightPanel.setLayout(new java.awt.CardLayout());

        columnDetailsSpiltPanel.setPreferredSize(new java.awt.Dimension(450, 532));

        jScrollPane4.setPreferredSize(new java.awt.Dimension(300, 404));

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(dataTable);

        columnDetailsSpiltPanel.setRightComponent(jScrollPane4);

        colNmParentPanel.setLayout(new java.awt.BorderLayout());

        colNmFilterPanel.setLayout(new java.awt.BorderLayout());

        columnNameFilter.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        columnNameFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                columnNameFilterKeyReleased(evt);
            }
        });
        colNmFilterPanel.add(columnNameFilter, java.awt.BorderLayout.CENTER);

        colNmParentPanel.add(colNmFilterPanel, java.awt.BorderLayout.NORTH);

        colNmScrollPanel.setPreferredSize(new java.awt.Dimension(150, 500));
        colNmScrollPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                colNmScrollPanelMouseReleased(evt);
            }
        });

        columnNameTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Colums", "Nulls", "Blanks", "null"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        columnNameTable.setSelectionMode(1);
        columnNameTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                columnNameTableMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                columnNameTableMouseClicked(evt);
            }
        });
        columnNameTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                columnNameTablePropertyChange(evt);
            }
        });
        columnNameTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                columnNameTableKeyReleased(evt);
            }
        });
        colNmScrollPanel.setViewportView(columnNameTable);

        colNmParentPanel.add(colNmScrollPanel, java.awt.BorderLayout.CENTER);

        columnDetailsSpiltPanel.setLeftComponent(colNmParentPanel);

        mainRightPanel.add(columnDetailsSpiltPanel, "card2");

        dataExplorerSplitPane.setRightComponent(mainRightPanel);

        mainJPanel.add(dataExplorerSplitPane, "dataExplorerCard");

        getContentPane().add(mainJPanel, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableNameTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableNameTableMouseClicked
        setColumnNameTable();
        setJTableColOneFilter(columnNameTable, columnNameFilter);

        if (evt.getButton() == MouseEvent.BUTTON3) {
            tablePopupMenu.remove(showNBSummaryTbl);
            tablePopupMenu.remove(showInitialSummaryTbl);
            tablePopupMenu.remove(showDataNavigatorPanel);
            tablePopupMenu.remove(showAllTablesDataNavigatorTbl);

            tablePopupMenu.add(showInitialSummaryTbl);
            System.out.println("DB " + db.getTotalNumberOfTables());
            System.out.println("MODEL " + tableNameTable.getModel().getRowCount());

            if (db.getTotalNumberOfTables() == tableNameTable.getModel().getRowCount()) {
                tablePopupMenu.remove(showAllTablesDataNavigatorTbl);
            } else {
                tablePopupMenu.add(showAllTablesDataNavigatorTbl);
            }
            tablePopupMenu.show(tableNameTable, evt.getX(), evt.getY());

        }


    }//GEN-LAST:event_tableNameTableMouseClicked

    private void tableNameTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableNameTableKeyReleased
        setColumnNameTable();
        setJTableColOneFilter(columnNameTable, columnNameFilter);
    }//GEN-LAST:event_tableNameTableKeyReleased

    private void columnNameTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_columnNameTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_columnNameTableMouseClicked

    private void columnNameTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_columnNameTableKeyReleased
        try {
            //getColumnDataRowCount();
            setDataTable(getColumnData());
        } catch (SQLException ex) {
            Logger.getLogger(MySQLNullsApp.class.getName()).log(Level.SEVERE, null, ex);
        }
//        buildColumnDataSQLWhere();
//        System.out.println(dynamic_query);
    }//GEN-LAST:event_columnNameTableKeyReleased

    private void tableNameFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableNameFilterKeyReleased
        setJTableColOneFilter(tableNameTable, tableNameFilter);
        setColumnNameTable();
        setJTableColOneFilter(columnNameTable, columnNameFilter);

    }//GEN-LAST:event_tableNameFilterKeyReleased

    private void columnNameFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_columnNameFilterKeyReleased
        setJTableColOneFilter(columnNameTable, columnNameFilter);
    }//GEN-LAST:event_columnNameFilterKeyReleased

    private void columnNameTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_columnNameTablePropertyChange

    }//GEN-LAST:event_columnNameTablePropertyChange

    private void colNmScrollPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_colNmScrollPanelMouseReleased

    }//GEN-LAST:event_colNmScrollPanelMouseReleased

    private void columnNameTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_columnNameTableMouseReleased
        try {
            
            setDataTable(getColumnData());
        } catch (SQLException ex) {
            Logger.getLogger(MySQLNullsApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_columnNameTableMouseReleased

    private void initialSummaryTableFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initialSummaryTableFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_initialSummaryTableFilterActionPerformed

    private void initialSummaryTableFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_initialSummaryTableFilterKeyReleased
        setJTableColOneFilter(summaryTable, initialSummaryTableFilter);
    }//GEN-LAST:event_initialSummaryTableFilterKeyReleased

    private void summaryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_summaryTableMouseClicked

        if (evt.getButton() == MouseEvent.BUTTON3) {
            tablePopupMenu.remove(showNBSummaryTbl);
            tablePopupMenu.remove(showInitialSummaryTbl);
            tablePopupMenu.remove(showDataNavigatorPanel);
            tablePopupMenu.remove(showAllTablesDataNavigatorTbl);

            if (summaryTable.getModel().getColumnCount() == 3) {
                tablePopupMenu.add(showNBSummaryTbl);
                tablePopupMenu.add(showDataNavigatorPanel);
            }
            if (summaryTable.getModel().getColumnCount() == 5) {
                tablePopupMenu.add(showInitialSummaryTbl);
                tablePopupMenu.add(showDataNavigatorPanel);

            }
            tablePopupMenu.show(summaryTable, evt.getX(), evt.getY());

        }
    }//GEN-LAST:event_summaryTableMouseClicked

    private void showNBSummaryTblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showNBSummaryTblActionPerformed

        try {
            setNullsBlankSummaryTable();
        } catch (SQLException ex) {
            Logger.getLogger(MySQLNullsApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_showNBSummaryTblActionPerformed

    private void showInitialSummaryTblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showInitialSummaryTblActionPerformed
        try {

            setInitialSummaryTable();
        } catch (SQLException ex) {
            Logger.getLogger(MySQLNullsApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_showInitialSummaryTblActionPerformed

    private void showDataNavigatorPanelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showDataNavigatorPanelActionPerformed
        try {
            initializeModel(buildTableSQLWhere());

        } catch (SQLException ex) {
            Logger.getLogger(MySQLNullsApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_showDataNavigatorPanelActionPerformed

    private void showAllTablesDataNavigatorTblActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllTablesDataNavigatorTblActionPerformed
        try {
            initializeModel();

        } catch (SQLException ex) {
            Logger.getLogger(MySQLNullsApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_showAllTablesDataNavigatorTblActionPerformed
    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    main(String args[])
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * main(String args[]) is the main method
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MySQLNullsApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MySQLNullsApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MySQLNullsApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MySQLNullsApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MySQLNullsApp().setVisible(true);
            }
        });
    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ResultTableModel extends DefaultTableModel
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * ResultTableModel extends DefaultTableModel to allow a table model to be
     * easily created from a SQL ResultSet
     */
    public class ResultTableModel extends DefaultTableModel {

        private ResultSet resultset;
        private int sqlRowCount;

        /*
        getColumnClass(int columnIndex) determine the object class of the field
        value and return the class type to the table model
         */
        @Override
        public Class<?> getColumnClass(int columnIndex) {
            Class columnClass = getValueAt(0, columnIndex).getClass();
            return columnClass;
        }

        @Override
        public int getColumnCount() {
            try {
                return resultset.getMetaData().getColumnCount();
                //return super.getColumnCount(); //To change body of generated methods, choose Tools | Templates.
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return -1;
        }

        @Override
        public int getRowCount() {
            return sqlRowCount;
        }

        @Override
        public String getColumnName(int column) {
            return super.getColumnName(column); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public Object getValueAt(int row, int column) {
            try {
                resultset.absolute(row + 1); //To change body of generated methods, choose Tools | Templates.
                return resultset.getObject(column + 1);

            } catch (SQLException e) {
                e.printStackTrace();
            }
            return "";
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            //all cells false
            return false;
        }

        public ResultSet getResultset() {
            return resultset;
        }

        public void setResultset(ResultSet resultset) {
            this.resultset = resultset;
        }

        public void setsqlRowCount(int rows) {
            sqlRowCount = rows;
        }

    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ArrayTableModel extends the DefaultTableModel
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * ArrayTableModel extends the DefaultTableModel to implement getColumnClass
     * which allows the data model to be aware of the class or data type of the
     * data in each column.
     */
    public class ArrayTableModel extends DefaultTableModel {

        public Class<?> getColumnClass(int columnIndex) {
            Class columnClass = getValueAt(0, columnIndex).getClass();
            return columnClass;
        }
    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    getRowsColOneSelectedArray(JTable jTable)
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * getRowsColOneSelectedArray(JTable jTable) returns an Array of values of
     * the first column of the selected rows in the table selected
     *
     * @param jTable
     * @return ArrayList<String>
     */
    public ArrayList<String> getRowsColOneSelectedArray(JTable jTable) {
        ArrayList<String> rowsColOneSelected = new ArrayList<>();
        try {
            int[] rows = jTable.getSelectedRows();
            for (int i = 0; i < rows.length; i++) {
                rowsColOneSelected.add(jTable.getValueAt(rows[i], 0).toString());
                System.out.println(jTable.getValueAt(rows[i], 0).toString());
            }
        } catch (Exception e) {
            rowsColOneSelected = null;
        }
        return rowsColOneSelected;
    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    getRowsColOneSelectedVector(JTable jTable)
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * getRowsColOneSelectedVector(JTable jTable) returns am vector of values of
     * the first column of the selected rows in the table selected.
     *
     * @param jTable
     * @return
     */
    public Vector getRowsColOneSelectedVector(JTable jTable) {
        Vector rowsColOneSelected = new Vector();
        try {
            int[] rows = jTable.getSelectedRows();
            for (int i = 0; i < rows.length; i++) {
                rowsColOneSelected.add(jTable.getValueAt(rows[i], 0).toString());
                System.out.println(jTable.getValueAt(rows[i], 0).toString());
            }
        } catch (Exception e) {
            rowsColOneSelected = null;
        }
        return rowsColOneSelected;
    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    getRowColOneSelected(JTable jTable)
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * getRowColOneSelected(JTable jTable) returns the value of the first column
     * of the selected row in the table selected in the view.
     *
     * @param jTable
     * @return String
     */
    public String getRowColOneSelected(JTable jTable) {
        int[] rows = jTable.getSelectedRows();
        String rowColOneSelected = null;

        try {
            int row = jTable.getSelectedRow();
            rowColOneSelected = (jTable.getValueAt(rows[0], 0).toString());
        } catch (Exception e) {
            rowColOneSelected = null;
        }

        return rowColOneSelected;

    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    getColumnData()
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * getColumnData() gets the data from the database for the column names
     * selected in the columnNamesTable in the data explorer view.
     *
     * @return
     * @throws SQLException
     */
    public ResultSet getColumnData() throws SQLException {
        buildColumnDataQuery();
        
        Statement statement = db.conn.createStatement();
        // Gets and sets the row count of the selected Query. this is to allow the table 
        // model to show the correct number or rows. 
        ResultSet getColDataRowCount = statement.executeQuery(dynamic_query_rowcount);
        getColDataRowCount.first();
        dynamic_rowcount= Integer.parseInt(getColDataRowCount.getObject(1).toString());
        
        ResultSet getColData = statement.executeQuery(dynamic_query);
        getColData.first();
        return getColData;
    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    setColumnNameTable()
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * setColumnNameTable() set the table model for the columnNameTable in the
     * data explorer view.
     */
    public void setColumnNameTable() {
        ResultSet columns = null;
        try {
            columns = db.getColumnNames(getRowColOneSelected(tableNameTable));

        } catch (SQLException ex) {

            Logger.getLogger(MySQLNullsApp.class.getName()).log(Level.SEVERE, null, ex);
        }

        columnNameTable.setModel(db.resultSetToColumnNameTableModel(columns));
        columnNameTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        columnNameTable.getColumnModel().getColumn(0).setMinWidth(90);
        columnNameTable.getColumnModel().getColumn(0).setMaxWidth(260);
        // columnNameTable.getColumnModel().getColumn(1).setMinWidth(15);
        columnNameTable.getColumnModel().getColumn(1).setPreferredWidth(35);
        columnNameTable.getColumnModel().getColumn(1).setMaxWidth(35);
        // columnNameTable.getColumnModel().getColumn(2).setMinWidth(15);
        columnNameTable.getColumnModel().getColumn(2).setPreferredWidth(45);
        columnNameTable.getColumnModel().getColumn(2).setMaxWidth(45);
        // columnNameTable.getColumnModel().getColumn(3).setMinWidth(10);
        columnNameTable.getColumnModel().getColumn(3).setPreferredWidth(1);
        columnNameTable.getColumnModel().getColumn(3).setMaxWidth(Integer.MAX_VALUE);

        columnNameTable.getTableHeader().setReorderingAllowed(false);

        setTableRowSorter(columnNameTable);
    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    setInitialSummaryTable()
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * setInitialSummaryTable() sets the table model for the Initial Summary
     * Table.
     *
     * @throws SQLException
     */
    public void setInitialSummaryTable() throws SQLException {

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);

        ResultSet rs = db.analyseTables();
        int rowCount = db.getNumberOfTables();

        Object[] columns = {"Table Name", "Column Count", "Row Count"};
        ResultTableModel summaryTableModel = new ResultTableModel();
        summaryTableModel.setResultset(rs);

        summaryTableModel.setColumnIdentifiers(columns);
        summaryTableModel.setsqlRowCount(rowCount);

        summaryTable.setModel(summaryTableModel);
        summaryTable.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        ((DefaultTableCellRenderer) summaryTable.getTableHeader().getDefaultRenderer())
                .setHorizontalAlignment(SwingConstants.CENTER);

        summaryTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        summaryTable.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);

        summaryTable.getTableHeader().setReorderingAllowed(false);

        summaryTable.setAutoCreateRowSorter(true);

        CardLayout card = (CardLayout) mainJPanel.getLayout();
        card.show(mainJPanel, "initialSummaryCard");
        tableViewinUse = "initialSummaryPanel";
        initialSummaryPanel.setVisible(true);
    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    setNullsBlankSummaryTable()
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * setNullsBlankSummaryTable() sets the table model for the Nulls Blank
     * Summary Table.
     *
     * @throws SQLException
     */
    public void setNullsBlankSummaryTable() throws SQLException {

        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);

        Object[][] tableNullsBlankSummaryArray = buildArrayNullsBlankSummary();

        Object[] columns = {"Table Name", "Column Count", "Row Count", "% Nulls", "% Blanks"};
        ArrayTableModel summaryNullsBlankTableModel = new ArrayTableModel();
        //DefaultTableModel summaryNullsBlankTableModel = new DefaultTableModel(tableNullsBlankSummaryArray, columns);
        summaryNullsBlankTableModel.setDataVector(tableNullsBlankSummaryArray, columns);
        summaryTable.setModel(summaryNullsBlankTableModel);

        summaryTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer);
        summaryTable.getColumnModel().getColumn(2).setCellRenderer(centerRenderer);
        summaryTable.getColumnModel().getColumn(3).setCellRenderer(centerRenderer);
        summaryTable.getColumnModel().getColumn(4).setCellRenderer(centerRenderer);

        setTableRowSorter(summaryTable);

        CardLayout card = (CardLayout) mainJPanel.getLayout();
        card.show(mainJPanel, "initialSummaryCard");
        initialSummaryPanel.setVisible(true);

    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    setDataTable(ResultSet data)
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * setDataTable(ResultSet data) sets the data for the data view table in the
     * data navigation view. The data is the result set of select (*) from the
     * selected table columns in the tableNameTable and columnNameTable. Thus,
     * the user selects a table, then columns and then data for those columns
     * are displayed.
     *
     * @param data
     * @throws SQLException
     */
    public void setDataTable(ResultSet data) throws SQLException {
        
        ResultTableModel dataTableModel = new ResultTableModel();
        

        dataTableModel.setColumnIdentifiers(getRowsColOneSelectedVector(columnNameTable));
        dataTableModel.setsqlRowCount(dynamic_rowcount);
        dataTableModel.setResultset(data);
        
        dataTable.setModel(dataTableModel);
        dataTable.setAutoCreateRowSorter(true);

        /*
        TableModel model = db.resultSetToTableModel(data);
        dataTable.setModel(model);
        setTableRowSorter(dataTable);
        */
        
    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    setTableRowSorter(JTable table)
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * Creates a table row sorter to allow JTABLE to be sorted and filtered.
     *
     * @param table
     * @return TableRowSorter
     */
    public TableRowSorter<TableModel> setTableRowSorter(JTable table) {
        TableRowSorter<TableModel> sorter
                = new TableRowSorter<TableModel>(table.getModel());
        table.setRowSorter(sorter);

        return sorter;

    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    setJTableColOneFilter(JTable table_name, JTextField textFilter)
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * setJTableColOneFilter(JTable table_name, JTextField textFilter) determine
     * if text has been entered in a text field for filtering table data. if
     * there are
     *
     * @param table_name
     * @param textFilter
     */
    public void setJTableColOneFilter(JTable table_name, JTextField textFilter) {
        TableRowSorter<TableModel> sorter = setTableRowSorter(table_name);

        String textEntered = textFilter.getText();
        if (textEntered.length() == 0) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter(textEntered));
        }

    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    showConnectionDialog()
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * Shows the dialog box to enter database server parameters to allow the
     * application to connect to a database.
     *
     *
     */
    public void showConnectionDialog() {

        DBConnectDialog dbconnectdialog = new DBConnectDialog();
        dbconnectdialog.setModal(true);
        dbconnectdialog.setVisible(true);
        db = dbconnectdialog.getDb();

    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    initializeModel()
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * initializeModel() populates the table with database table names in the
     * data explorer view. Since it does NOT take a SQLwhere clause it populates
     * the tableNameTable with all the table names for a database from the
     * information schema database.
     *
     * @throws SQLException
     */
    public void initializeModel() throws SQLException {
        /*
            @todo makes this threadsafe
         */

        ResultSet tbls = db.getTableNames();
        tableNameTable.setModel(db.resultSetToTableModel(tbls));
        TableRowSorter<TableModel> tableNameTableSorter = setTableRowSorter(tableNameTable);
    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    ginitializeModel(String whereSQL)
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * initializeModel(String whereSQL) populates the table with database table
     * names in the data explorer view. It takes a SQLWhere clause as a
     * parameter to limit the number of tables displayed. This method is called
     * from the summary tables which and the SQLwhere allows only the tables
     * that was selected in the summary tables to be displayed in the
     * tableNameTable.
     *
     * @param whereSQL
     * @throws SQLException
     */
    public void initializeModel(String whereSQL) throws SQLException {
        /*
            @todo makes this threadsafe
         */

        ResultSet tbls = db.getTableNames(whereSQL);
        tableNameTable.setModel(db.resultSetToTableModel(tbls));
        TableRowSorter<TableModel> tableNameTableSorter = setTableRowSorter(tableNameTable);

        CardLayout card = (CardLayout) mainJPanel.getLayout();
        card.show(mainJPanel, "dataExplorerCard");
        dataExplorerSplitPane.setVisible(true);
    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    getTableSQLWhereRecordCount()
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * buildTableSQLWhere() builds a where clause to restrict the table
     * selection to only those selected in the table window
     *
     * @return
     */
    public String buildTableSQLWhere() {

        ArrayList<String> selectedTables = getRowsColOneSelectedArray(summaryTable);
        String sqlWhere = "";
        // If it is the initial Summary Table Model get the selected tables
        // or all tables in database if none are selected.
        TableModel tableModel = summaryTable.getModel();
        if (tableModel.getColumnCount() == 3) {

            if (selectedTables.isEmpty()) {
                sqlWhere = " and 1=1 ";
            } else {
                sqlWhere = "and table_name in (";
                for (int i = 0; i < selectedTables.size(); i++) {
                    sqlWhere += "'" + selectedTables.get(i).toString() + "'";
                    if (i == selectedTables.size() - 1) {
                        sqlWhere += ")";
                    } else {
                        sqlWhere += ",";
                    }
                }
            }
        }
        if (tableModel.getColumnCount() == 5) {

            if (selectedTables.isEmpty()) {
                sqlWhere = "and table_name in (";
                int tableCount = tableModel.getRowCount();
                for (int tc = 0; tc < tableCount; tc++) {
                    sqlWhere += "'" + tableModel.getValueAt((tc), (0)) + "'";
                    if (tc == tableCount - 1) {
                        sqlWhere += ")";
                    } else {
                        sqlWhere += ",";
                    }
                }

            } else {
                sqlWhere = "and table_name in (";
                for (int i = 0; i < selectedTables.size(); i++) {
                    sqlWhere += "'" + selectedTables.get(i).toString() + "'";
                    if (i == selectedTables.size() - 1) {
                        sqlWhere += ")";
                    } else {
                        sqlWhere += ",";
                    }
                }
            }
        }
        System.out.println("BUILD TABLE SQL WHERE" + sqlWhere);
        return sqlWhere;
    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    getTableSQLWhereRecordCount()
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * getTableSQLWhereRecordCount() determine how many records have been
     * selected in the summary table. if none are selected a count of all the
     * tables in the database is returned.
     *
     * @return
     */
    public int getTableSQLWhereRecordCount() {
        int selectedArrayCount;
        ArrayList<String> selectedTables = getRowsColOneSelectedArray(summaryTable);
        if (selectedTables.isEmpty()) {
            selectedArrayCount = db.getNumberOfTables();

        } else {
            selectedArrayCount = selectedTables.size();
        }
        return selectedArrayCount;

    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    buildColumnDataSQLWhere()
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * buildColumnDataSQLWhere() builds the "where" part of the SQL query to
     * retrieve data from the database for the column names selected in the
     * "column names navigator" table. See buildColumnDataQuery().
     */
    public void buildColumnDataSQLWhere() {

        TableModel columnNames = columnNameTable.getModel();
        String sqlWhere = "";
        for (int i = 0; i < columnNames.getRowCount(); i++) {
            if (columnNames.getValueAt(i, 1).equals(true)) {
                sqlWhere += " and " + columnNames.getValueAt(i, 0) + " is null";
            }
            if (columnNames.getValueAt(i, 2).equals(true)) {
                sqlWhere += " and " + columnNames.getValueAt(i, 0) + " =''";
            }
            if (columnNames.getValueAt(i, 3) != null) {
                sqlWhere += " and " + columnNames.getValueAt(i, 0) + " like '%" + columnNames.getValueAt(i, 3) + "%'";
            }
        }
        dynamic_query = dynamic_query + sqlWhere + ";";
        dynamic_query_rowcount = dynamic_query_rowcount + sqlWhere+";";
        
    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    buildColumnDataQuery()
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * buildColumnDataQuery() builds the "select column" part of the SQL query
     * to retrieve data from the database for the column names selected in the
     * "column names navigator" table. See buildColumnDataSQLWhere()
     */
    public void buildColumnDataQuery() {
        ArrayList<String> columns_selected;
        ResultSet columns = null;

        String table_name = (getRowColOneSelected(tableNameTable));
        columns_selected = getRowsColOneSelectedArray(columnNameTable);

        String query = "select ";

        for (int i = 0; i < columns_selected.size(); i++) {
            query += columns_selected.get(i).toString();
            if (i == columns_selected.size() - 1) {
                query += "";
            } else {
                query += ",";
            }
        }
        dynamic_query = query + " from " + table_name + " where 1=1 ";
        dynamic_query_rowcount = "select count(*) from "+ table_name +" where 1=1 ";

        buildColumnDataSQLWhere();
    }

    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    buildArrayNullsBlankSummary()
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    /**
     * buildArrayNullsBlankSummary() builds an array with which to create a
     * table model for the summary of database tables their percentage nulls and
     * blanks
     *
     * @return
     * @throws SQLException
     */
    public Object[][] buildArrayNullsBlankSummary() throws SQLException {
        //ArrayList<String[]> tNBS = new ArrayList<>();

        int ArrayrowCount = getTableSQLWhereRecordCount();

        int ArraycolCount = 5;

        Object[][] tableNullBlankSummaryArray = new Object[ArrayrowCount][ArraycolCount];
        ResultSet tableNames = db.getTableNames(buildTableSQLWhere());
        tableNames.first();
        String tableName;
        double columnCount;
        double rowCount;
        double tableNulls;
        double tableBlanks;
        double totalfields;
        double percentageTableNulls;
        double percentageTableBlanks;
        double zeroValue = 0;
        double hundredValue = 100;
        DecimalFormat to2DP = new DecimalFormat("0.00");
        //  to2DP.format(balance) 

        int count = 0;
        for (int i = 0; i < db.getNumberOfTables(); i++) {

            tableName = tableNames.getString(1);

            columnCount = db.getColCount(tableName);
            rowCount = db.getRowCount(tableName);
            totalfields = columnCount * rowCount * 1.0f;
            zeroValue = 0;

            //System.out.println("Totalfields "+totalfields);
            db.transPoseNb(tableName);
            tableNulls = db.getNullTableCount(tableName);
            tableBlanks = db.getBlankTableCount(tableName);

            if (totalfields == zeroValue) {

                percentageTableNulls = 0;
                percentageTableBlanks = 0;
            } else {
                percentageTableNulls = (tableNulls / totalfields) * hundredValue;
                percentageTableBlanks = (tableBlanks / totalfields) * hundredValue;
            }

            tableNullBlankSummaryArray[count] = new Object[]{tableName, columnCount, rowCount, to2DP.format(percentageTableNulls), to2DP.format(percentageTableBlanks)};
            tableNames.next();
            count++;

        }

        return tableNullBlankSummaryArray;
    }
    /*
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel colNmFilterPanel;
    private javax.swing.JPanel colNmParentPanel;
    private javax.swing.JScrollPane colNmScrollPanel;
    private javax.swing.JSplitPane columnDetailsSpiltPanel;
    private javax.swing.JTextField columnNameFilter;
    private javax.swing.JTable columnNameTable;
    private javax.swing.JSplitPane dataExplorerSplitPane;
    private javax.swing.JTable dataTable;
    private javax.swing.JPanel initialSummaryPanel;
    private javax.swing.JTextField initialSummaryTableFilter;
    private javax.swing.JScrollPane initialsummaryScrollPanel;
    private javax.swing.JPanel intialSummaryfilterPanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPanel mainJPanel;
    private javax.swing.JPanel mainRightPanel;
    private javax.swing.JMenuItem showAllTablesDataNavigatorTbl;
    private javax.swing.JMenuItem showDataNavigatorPanel;
    private javax.swing.JMenuItem showInitialSummaryTbl;
    private javax.swing.JMenuItem showNBSummaryTbl;
    private javax.swing.JMenuItem showSelectedColumnData;
    private javax.swing.JTable summaryTable;
    private javax.swing.JTextField tableNameFilter;
    private javax.swing.JTable tableNameTable;
    private javax.swing.JPopupMenu tablePopupMenu;
    private javax.swing.JPanel tblNmFilterPanel;
    private javax.swing.JPanel tblNmParentPanel;
    private javax.swing.JScrollPane tblNmScrollPanel;
    private javax.swing.JPanel topInitialSummaryView;
    // End of variables declaration//GEN-END:variables
}
